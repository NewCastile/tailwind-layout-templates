---
import type { TemplateItem } from "../../../data"
import CodeWrapper from "./CodeWrapper.astro"

interface Props {
	files: TemplateItem["files"]
}

const { files } = Astro.props
const fileNames = files ? files.map(({ rawFileName }) => rawFileName) : []
const stringifyedFiles = files ? files.map(({ rawFile, lang }) => ({ rawFile, lang })) : []
---

<astro-tabs class="flex w-full flex-col items-start justify-start pb-8">
	<h3 id="files-tablist" class="hidden">Necessary files</h3>
	<div class="w-full px-8">
		<div class="w-full overflow-x-auto">
			<div
				role="tablist"
				aria-labelledby="files-tablist"
				class="flex w-max flex-row items-center justify-start gap-4 px-4"
			>
				{
					fileNames.map((fileName, fileNameIdx) => {
						const isFirstElement = !fileNameIdx
						const tabIdx = fileNameIdx + 1
						return (
							<button
								id={`tab-${tabIdx}`}
								type="button"
								role="tab"
								aria-selected={isFirstElement ? "true" : "false"}
								aria-controls={`tabpanel-${tabIdx}`}
								class="w-max"
							>
								<span class="focus w-max">{fileName}</span>
							</button>
						)
					})
				}
			</div>
		</div>
	</div>
	{
		stringifyedFiles.map(({ rawFile, lang }, fileIdx) => {
			const isFirstElement = !fileIdx
			const panelIdx = fileIdx + 1
			return (
				<div
					id={`tabpanel-${panelIdx}`}
					class:list={[{ hidden: isFirstElement }]}
					role="tabpanel"
					class="w-full px-8"
					aria-labelledby={`tab-${panelIdx}`}
				>
					<CodeWrapper lang={lang} raw={rawFile} />
				</div>
			)
		})
	}
</astro-tabs>
<style>
	.tabs {
		font-family: "lucida grande", sans-serif;
	}

	[role="tab"][aria-selected="true"] {
		border-top-width: 6px;
		border-top-color: rgb(36 116 214);
	}
</style>
<script>
	class Tabs extends HTMLElement {
		constructor() {
			super()
			const $tabs = this.querySelectorAll<HTMLElement>("[role=tab]")
			const $firstTab = $tabs[0]
			const $lastTab = $tabs[$tabs.length - 1]
			const $panels = this.querySelectorAll<HTMLElement>("[role=tabpanel]")

			const setSelectedTab = (currentTab: HTMLElement) => {
				$tabs.forEach((tab, tabIdx) => {
					if (currentTab === tab) {
						tab.setAttribute("aria-selected", "true")
						tab.removeAttribute("tabindex")
						$panels[tabIdx].classList.remove("hidden")
					} else {
						tab.setAttribute("aria-selected", "false")
						tab.tabIndex = -1
						$panels[tabIdx].classList.add("hidden")
					}
				})
			}

			const moveFocusToTab = (currentTab: HTMLElement) => {
				currentTab.focus()
			}

			const moveFocusToPreviousTab = (currentTab: HTMLElement) => {
				if (currentTab === $firstTab) {
					moveFocusToTab($lastTab)
				} else {
					const index = Array.from($tabs).indexOf(currentTab)
					moveFocusToTab(Array.from($tabs)[index - 1])
				}
			}

			const moveFocusToNextTab = (currentTab: HTMLElement) => {
				if (currentTab === $lastTab) {
					moveFocusToTab($firstTab)
				} else {
					const index = Array.from($tabs).indexOf(currentTab)
					moveFocusToTab(Array.from($tabs)[index + 1])
				}
			}

			/* EVENT HANDLERS */

			const onKeydown = (event: KeyboardEvent) => {
				let tgt = event.currentTarget,
					flag = false

				if (!(tgt instanceof HTMLElement)) return
				switch (event.key) {
					case "ArrowLeft":
						moveFocusToPreviousTab(tgt)
						flag = true
						break

					case "ArrowRight":
						moveFocusToNextTab(tgt)
						flag = true
						break

					case "Home":
						moveFocusToTab($firstTab)
						flag = true
						break

					case "End":
						moveFocusToTab($lastTab)
						flag = true
						break

					default:
						break
				}

				if (flag) {
					event.stopPropagation()
					event.preventDefault()
				}
			}

			// Since this example uses buttons for the tabs, the click onr also is activated
			// with the space and enter keys
			const onClick = (event: MouseEvent) => {
				const tgt = event.currentTarget
				if (tgt && tgt instanceof HTMLElement) {
					setSelectedTab(tgt)
				}
			}

			$tabs.forEach(($tab) => {
				$tab.tabIndex = -1
				$tab.setAttribute("aria-selected", "false")
				$tab.addEventListener("keydown", (event) => onKeydown(event))
				$tab.addEventListener("click", (event) => onClick(event))
			})

			if ($tabs) {
				setSelectedTab(Array.from($tabs)[0])
			}
		}
	}

	customElements.define("astro-tabs", Tabs)
</script>
<!-- <script is:inline>
	/*
	 *   This content is licensed according to the W3C Software License at
	 *   https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
	 *
	 *   File:   tabs-manual.js
	 *
	 *   Desc:   Tablist widget that implements ARIA Authoring Practices
	 */

	"use strict"

	class TabsManual {
		constructor(groupNode) {
			this.tablistNode = groupNode

			this.tabs = []

			this.firstTab = null
			this.lastTab = null

			this.tabs = Array.from(this.tablistNode.querySelectorAll("[role=tab]"))
			this.tabpanels = []

			for (var i = 0; i < this.tabs.length; i += 1) {
				var tab = this.tabs[i]
				var tabpanel = document.getElementById(tab.getAttribute("aria-controls"))

				tab.tabIndex = -1
				tab.setAttribute("aria-selected", "false")
				this.tabpanels.push(tabpanel)

				tab.addEventListener("keydown", this.onKeydown.bind(this))
				tab.addEventListener("click", this.onClick.bind(this))

				if (!this.firstTab) {
					this.firstTab = tab
				}
				this.lastTab = tab
			}

			this.setSelectedTab(this.firstTab)
		}

		setSelectedTab(currentTab) {
			for (var i = 0; i < this.tabs.length; i += 1) {
				var tab = this.tabs[i]
				if (currentTab === tab) {
					tab.setAttribute("aria-selected", "true")
					tab.removeAttribute("tabindex")
					this.tabpanels[i].classList.remove("is-hidden")
				} else {
					tab.setAttribute("aria-selected", "false")
					tab.tabIndex = -1
					this.tabpanels[i].classList.add("is-hidden")
				}
			}
		}

		moveFocusToTab(currentTab) {
			currentTab.focus()
		}

		moveFocusToPreviousTab(currentTab) {
			var index

			if (currentTab === this.firstTab) {
				this.moveFocusToTab(this.lastTab)
			} else {
				index = this.tabs.indexOf(currentTab)
				this.moveFocusToTab(this.tabs[index - 1])
			}
		}

		moveFocusToNextTab(currentTab) {
			var index

			if (currentTab === this.lastTab) {
				this.moveFocusToTab(this.firstTab)
			} else {
				index = this.tabs.indexOf(currentTab)
				this.moveFocusToTab(this.tabs[index + 1])
			}
		}

		/* EVENT HANDLERS */

		onKeydown(event) {
			var tgt = event.currentTarget,
				flag = false

			switch (event.key) {
				case "ArrowLeft":
					this.moveFocusToPreviousTab(tgt)
					flag = true
					break

				case "ArrowRight":
					this.moveFocusToNextTab(tgt)
					flag = true
					break

				case "Home":
					this.moveFocusToTab(this.firstTab)
					flag = true
					break

				case "End":
					this.moveFocusToTab(this.lastTab)
					flag = true
					break

				default:
					break
			}

			if (flag) {
				event.stopPropagation()
				event.preventDefault()
			}
		}

		// Since this example uses buttons for the tabs, the click onr also is activated
		// with the space and enter keys
		onClick(event) {
			this.setSelectedTab(event.currentTarget)
		}
	}

	// Initialize tablist

	window.addEventListener("load", function () {
		var tablists = document.querySelectorAll("[role=tablist].manual")
		for (var i = 0; i < tablists.length; i++) {
			new TabsManual(tablists[i])
		}
	})
</script> -->
